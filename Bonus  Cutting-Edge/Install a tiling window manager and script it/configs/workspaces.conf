#!/bin/bash

#
# TilingWM Manager - Workspace Configuration
#
# This file defines workspace automation rules and behaviors.
# It is sourced by the automation script and can be customized
# to change workspace switching behavior.
#
# Author: TilingWM Manager Project
# License: MIT
#

# Workspace Names and Numbers
declare -A WORKSPACE_NAMES=(
    [1]="Terminal"
    [2]="Web"
    [3]="Development"
    [4]="Communication"
    [5]="Files"
    [6]="Media"
    [7]="Graphics"
    [8]="Music"
    [9]="System"
    [10]="Background"
)

# Time-based Workspace Rules
# Format: "HH:MM:WORKSPACE_NUMBER:DESCRIPTION"
TIME_RULES=(
    "06:00:1:Morning startup"
    "09:00:2:Work begins"
    "12:00:2:Afternoon work"
    "17:00:3:Evening personal time"
    "22:00:10:Night background"
    "00:00:10:Late night background"
)

# Application to Workspace Assignments
declare -A APP_WORKSPACE=(
    ["firefox"]="2"
    ["chromium"]="2"
    ["code"]="3"
    ["atom"]="3"
    ["sublime_text"]="3"
    ["thunderbird"]="4"
    ["discord"]="4"
    ["slack"]="4"
    ["nautilus"]="5"
    ["thunar"]="5"
    ["vlc"]="6"
    ["mpv"]="6"
    ["totem"]="6"
    ["gimp"]="7"
    ["inkscape"]="7"
    ["blender"]="7"
    ["spotify"]="8"
    ["rhythmbox"]="8"
    ["audacity"]="8"
    ["htop"]="9"
    ["system-monitor"]="9"
    ["gparted"]="9"
)

# Workspace Behavior Settings
WORKSPACE_AUTO_SWITCH=true        # Enable automatic workspace switching
WORKSPACE_AUTO_CREATE=true        # Create workspaces automatically
WORKSPACE_AUTO_CLEANUP=true       # Remove empty workspaces
WORKSPACE_IDLE_TIMEOUT=300        # Seconds before idle workspace switch
WORKSPACE_SWITCH_DELAY=2          # Seconds delay before switching

# Power Management Workspace Rules
BATTERY_LOW_WORKSPACE=9           # Workspace for low battery
BATTERY_CRITICAL_WORKSPACE=10     # Workspace for critical battery
AC_POWER_WORKSPACE=2              # Preferred workspace when plugged in

# Special Workspace Behaviors
BACKGROUND_WORKSPACE=10           # Workspace for background/idle
FULLSCREEN_WORKSPACE_LOCK=true    # Don't auto-switch from fullscreen apps
PRESENTATION_MODE_WORKSPACE=6     # Workspace for presentation mode

# Workspace Layout Preferences
declare -A WORKSPACE_LAYOUTS=(
    [1]="default"      # Terminal workspace
    [2]="tabbed"       # Web browser workspace  
    [3]="default"      # Development workspace
    [4]="stacking"     # Communication workspace
    [5]="default"      # File manager workspace
    [6]="tabbed"       # Media workspace
    [7]="default"      # Graphics workspace
    [8]="tabbed"       # Music workspace
    [9]="stacking"     # System workspace
    [10]="default"     # Background workspace
)

# Workspace Startup Applications
declare -A WORKSPACE_STARTUP_APPS=(
    [1]="terminology"
    [2]="firefox"
    [4]="thunderbird"
    [8]="spotify"
)

# Custom Functions for Workspace Management
workspace_pre_switch_hook() {
    local from_workspace="$1"
    local to_workspace="$2"
    local reason="$3"
    
    # Custom logic before workspace switch
    log_debug "Pre-switch hook: $from_workspace -> $to_workspace ($reason)"
    
    # Example: Save current workspace state
    echo "$(date): Switching from $from_workspace to $to_workspace" >> "$LOG_DIR/workspace-history.log"
}

workspace_post_switch_hook() {
    local from_workspace="$1"
    local to_workspace="$2"
    local reason="$3"
    
    # Custom logic after workspace switch
    log_debug "Post-switch hook: $from_workspace -> $to_workspace ($reason)"
    
    # Example: Set workspace-specific layout
    if [[ -n "${WORKSPACE_LAYOUTS[$to_workspace]:-}" ]]; then
        local layout="${WORKSPACE_LAYOUTS[$to_workspace]}"
        i3-msg "layout $layout" &>/dev/null || true
    fi
    
    # Example: Start workspace-specific applications
    if [[ -n "${WORKSPACE_STARTUP_APPS[$to_workspace]:-}" ]]; then
        local app="${WORKSPACE_STARTUP_APPS[$to_workspace]}"
        # Only start if not already running
        if ! pgrep -x "$app" > /dev/null; then
            log_debug "Starting application for workspace $to_workspace: $app"
            nohup "$app" &>/dev/null &
        fi
    fi
}

# Time slot detection function
get_time_based_workspace() {
    local current_time=$(date +%H:%M)
    local current_hour=$(date +%H | sed 's/^0//')
    local current_minute=$(date +%M | sed 's/^0//')
    local current_total=$((current_hour * 60 + current_minute))
    
    for rule in "${TIME_RULES[@]}"; do
        local time=$(echo "$rule" | cut -d: -f1,2)
        local workspace=$(echo "$rule" | cut -d: -f3)
        local rule_hour=$(echo "$time" | cut -d: -f1 | sed 's/^0//')
        local rule_minute=$(echo "$time" | cut -d: -f2 | sed 's/^0//')
        local rule_total=$((rule_hour * 60 + rule_minute))
        
        # Check if current time is past this rule time
        if [[ $current_total -ge $rule_total ]]; then
            echo "$workspace"
        fi
    done | tail -1  # Get the last matching rule
}

# Application-based workspace detection
get_app_workspace() {
    local app_name="$1"
    echo "${APP_WORKSPACE[$app_name]:-}"
}

# Check if workspace switch should be prevented
should_prevent_switch() {
    local current_workspace="$1"
    local target_workspace="$2"
    
    # Don't switch if in fullscreen mode and lock is enabled
    if [[ "$FULLSCREEN_WORKSPACE_LOCK" == "true" ]]; then
        if i3-msg -t get_tree | jq -e '.nodes[].nodes[].nodes[] | select(.fullscreen_mode == 1)' >/dev/null 2>&1; then
            log_debug "Preventing workspace switch: fullscreen application detected"
            return 0  # Prevent switch
        fi
    fi
    
    # Don't switch if current workspace has urgent windows
    if i3-msg -t get_workspaces | jq -e ".[] | select(.num == $current_workspace and .urgent == true)" >/dev/null 2>&1; then
        log_debug "Preventing workspace switch: urgent windows in current workspace"
        return 0  # Prevent switch
    fi
    
    return 1  # Allow switch
}

# Custom workspace naming function
get_workspace_display_name() {
    local workspace_num="$1"
    local workspace_name="${WORKSPACE_NAMES[$workspace_num]:-$workspace_num}"
    echo "$workspace_num: $workspace_name"
}

# Export functions and variables for use by automation script
export -f workspace_pre_switch_hook
export -f workspace_post_switch_hook
export -f get_time_based_workspace
export -f get_app_workspace
export -f should_prevent_switch
export -f get_workspace_display_name

export WORKSPACE_AUTO_SWITCH
export WORKSPACE_AUTO_CREATE
export WORKSPACE_AUTO_CLEANUP
export WORKSPACE_IDLE_TIMEOUT
export WORKSPACE_SWITCH_DELAY
export BATTERY_LOW_WORKSPACE
export BATTERY_CRITICAL_WORKSPACE
export AC_POWER_WORKSPACE
export BACKGROUND_WORKSPACE
export FULLSCREEN_WORKSPACE_LOCK
export PRESENTATION_MODE_WORKSPACE