#!/bin/bash

#
# TilingWM Manager - Configuration Script
#
# This script handles configuration management, template generation,
# and customization of the TilingWM Manager system.
#
# Usage: ./configure.sh [--user-config|--system-config|--reset|--help]
#
# Author: TilingWM Manager Project
# License: MIT
#

set -euo pipefail

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
readonly CONFIG_DIR="$HOME/.config/tilingwm"
readonly DATA_DIR="$HOME/.local/share/tilingwm"
readonly LOG_DIR="$DATA_DIR/logs"
readonly LOG_FILE="$LOG_DIR/configure.log"

# Ensure directories exist
mkdir -p "$LOG_DIR"

# Logging functions
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    echo "[$level] $message"
}

log_info() { log "INFO" "$@"; }
log_warn() { log "WARN" "$@"; }
log_error() { log "ERROR" "$@"; }

error_exit() {
    log_error "$1"
    exit 1
}

# Check if i3 is available
check_i3_available() {
    if ! command -v i3 &> /dev/null; then
        error_exit "i3 window manager is not installed. Run the installer first."
    fi
}

# Generate user configuration
generate_user_config() {
    log_info "Generating user configuration..."
    
    # Create configuration directory
    mkdir -p "$CONFIG_DIR"
    
    # Copy default configuration files
    if [[ -f "$PROJECT_ROOT/configs/config.yaml" ]]; then
        cp "$PROJECT_ROOT/configs/config.yaml" "$CONFIG_DIR/"
        log_info "Created main configuration: $CONFIG_DIR/config.yaml"
    fi
    
    if [[ -f "$PROJECT_ROOT/configs/workspaces.conf" ]]; then
        cp "$PROJECT_ROOT/configs/workspaces.conf" "$CONFIG_DIR/"
        log_info "Created workspace configuration: $CONFIG_DIR/workspaces.conf"
    fi
    
    # Create keybindings configuration
    cat > "$CONFIG_DIR/keybindings.conf" << 'EOF'
# TilingWM Manager - Custom Keybindings
#
# Define custom keybindings for i3 window manager
# These will be included in the main i3 configuration

# Application launchers
bindsym $mod+Shift+f exec firefox
bindsym $mod+Shift+t exec terminology
bindsym $mod+Shift+n exec nautilus
bindsym $mod+Shift+c exec code

# Window management
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# Workspace management
bindsym $mod+Tab workspace next
bindsym $mod+Shift+Tab workspace prev

# System controls
bindsym $mod+Shift+p exec "systemctl suspend"
bindsym $mod+Shift+o exec "i3lock && systemctl suspend"

# Audio controls
bindsym $mod+F1 exec "pactl set-sink-mute @DEFAULT_SINK@ toggle"
bindsym $mod+F2 exec "pactl set-sink-volume @DEFAULT_SINK@ -5%"
bindsym $mod+F3 exec "pactl set-sink-volume @DEFAULT_SINK@ +5%"

# Brightness controls
bindsym $mod+F5 exec "brightnessctl set 5%-"
bindsym $mod+F6 exec "brightnessctl set +5%"
EOF
    
    log_info "Created keybindings configuration: $CONFIG_DIR/keybindings.conf"
    
    # Create autostart configuration
    cat > "$CONFIG_DIR/autostart.conf" << 'EOF'
# TilingWM Manager - Autostart Applications
#
# Applications to start automatically with i3

# System tray applications
exec --no-startup-id nm-applet
exec --no-startup-id volumeicon
exec --no-startup-id blueman-applet

# Desktop environment
exec --no-startup-id compton -b
exec --no-startup-id redshift-gtk
exec --no-startup-id feh --bg-scale ~/.config/tilingwm/wallpaper.jpg

# Productivity applications
# exec --no-startup-id firefox
# exec --no-startup-id thunderbird
# exec --no-startup-id spotify

# TilingWM automation
exec --no-startup-id tilingwm-automation --daemon
EOF
    
    log_info "Created autostart configuration: $CONFIG_DIR/autostart.conf"
}

# Generate i3 configuration
generate_i3_config() {
    log_info "Generating i3 configuration..."
    
    local i3_config_dir="$HOME/.config/i3"
    mkdir -p "$i3_config_dir"
    
    # Backup existing configuration
    if [[ -f "$i3_config_dir/config" ]]; then
        local backup_name="config.backup.$(date +%Y%m%d-%H%M%S)"
        cp "$i3_config_dir/config" "$i3_config_dir/$backup_name"
        log_info "Backed up existing i3 config to: $backup_name"
    fi
    
    # Generate new configuration
    cat > "$i3_config_dir/config" << EOF
# TilingWM Manager - Generated i3 Configuration
# Generated on: $(date)
# 
# This configuration is automatically generated by TilingWM Manager.
# Manual changes will be overwritten. Use the configuration files in
# $CONFIG_DIR to customize behavior.

# Include base configuration
$(cat "$PROJECT_ROOT/configs/i3-config")

# Include custom keybindings
$(if [[ -f "$CONFIG_DIR/keybindings.conf" ]]; then cat "$CONFIG_DIR/keybindings.conf"; fi)

# Include autostart applications  
$(if [[ -f "$CONFIG_DIR/autostart.conf" ]]; then cat "$CONFIG_DIR/autostart.conf"; fi)

# TilingWM Manager identification
# This comment is used to identify TilingWM-managed configurations
# DO NOT REMOVE: tilingwm-managed-config
EOF
    
    log_info "Generated i3 configuration: $i3_config_dir/config"
}

# Generate i3status configuration
generate_i3status_config() {
    log_info "Generating i3status configuration..."
    
    local i3status_config_dir="$HOME/.config/i3status"
    mkdir -p "$i3status_config_dir"
    
    # Backup existing configuration
    if [[ -f "$i3status_config_dir/config" ]]; then
        local backup_name="config.backup.$(date +%Y%m%d-%H%M%S)"
        cp "$i3status_config_dir/config" "$i3status_config_dir/$backup_name"
        log_info "Backed up existing i3status config to: $backup_name"
    fi
    
    # Copy template configuration
    cp "$PROJECT_ROOT/configs/i3status.conf" "$i3status_config_dir/config"
    
    log_info "Generated i3status configuration: $i3status_config_dir/config"
}

# System-wide configuration
generate_system_config() {
    log_info "Generating system-wide configuration..."
    
    if [[ $EUID -ne 0 ]]; then
        error_exit "System configuration requires root privileges (use sudo)"
    fi
    
    # Create system configuration directory
    mkdir -p "/etc/tilingwm"
    
    # Create system-wide settings
    cat > "/etc/tilingwm/system.conf" << 'EOF'
# TilingWM Manager - System Configuration
#
# System-wide settings for TilingWM Manager

# Default settings for all users
TILINGWM_LOG_LEVEL="INFO"
TILINGWM_CHECK_INTERVAL="30"
TILINGWM_MAX_IDLE_TIME="300"
TILINGWM_WORKSPACE_TIMEOUT="60"

# System integration
TILINGWM_ENABLE_SYSTEMD="true"
TILINGWM_ENABLE_LOGGING="true"
TILINGWM_LOG_ROTATION="true"

# Security settings
TILINGWM_SECURE_MODE="false"
TILINGWM_ALLOW_USER_CONFIG="true"
EOF
    
    log_info "Created system configuration: /etc/tilingwm/system.conf"
    
    # Create logrotate configuration
    cat > "/etc/logrotate.d/tilingwm" << 'EOF'
/home/*/.local/share/tilingwm/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
    su root root
}

/var/log/tilingwm*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
}
EOF
    
    log_info "Created logrotate configuration: /etc/logrotate.d/tilingwm"
}

# Reset configuration
reset_config() {
    log_info "Resetting TilingWM Manager configuration..."
    
    read -p "This will remove all TilingWM Manager configuration. Continue? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Reset cancelled"
        return
    fi
    
    # Backup before reset
    if [[ -d "$CONFIG_DIR" ]]; then
        local backup_dir="$DATA_DIR/backups/reset-backup-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$backup_dir"
        cp -r "$CONFIG_DIR"/* "$backup_dir/" 2>/dev/null || true
        log_info "Configuration backed up to: $backup_dir"
    fi
    
    # Remove configuration files
    rm -rf "$CONFIG_DIR" 2>/dev/null || true
    rm -f "$HOME/.config/i3/config" 2>/dev/null || true
    rm -f "$HOME/.config/i3status/config" 2>/dev/null || true
    
    log_info "Configuration reset completed"
    log_info "Run 'tilingwm configure --user-config' to recreate default configuration"
}

# Validate configuration
validate_config() {
    log_info "Validating configuration..."
    
    local errors=0
    
    # Check if configuration files exist
    if [[ ! -f "$CONFIG_DIR/config.yaml" ]]; then
        log_error "Main configuration file not found: $CONFIG_DIR/config.yaml"
        ((errors++))
    fi
    
    if [[ ! -f "$HOME/.config/i3/config" ]]; then
        log_error "i3 configuration file not found: $HOME/.config/i3/config"
        ((errors++))
    fi
    
    # Check i3 configuration syntax
    if command -v i3 &> /dev/null; then
        if ! i3 -C &>/dev/null; then
            log_error "i3 configuration syntax error detected"
            ((errors++))
        else
            log_info "i3 configuration syntax is valid"
        fi
    fi
    
    # Check required commands
    local required_commands=("i3-msg" "i3status" "dmenu")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            log_error "Required command not found: $cmd"
            ((errors++))
        fi
    done
    
    if [[ $errors -eq 0 ]]; then
        log_info "Configuration validation passed"
        return 0
    else
        log_error "Configuration validation failed with $errors errors"
        return 1
    fi
}

# Usage information
show_usage() {
    cat << EOF
TilingWM Manager Configuration Script

Usage: $0 [OPTIONS]

OPTIONS:
    --user-config       Generate user configuration files
    --system-config     Generate system-wide configuration (requires sudo)
    --i3-config         Generate i3 window manager configuration
    --i3status-config   Generate i3status bar configuration
    --reset             Reset all configuration to defaults
    --validate          Validate current configuration
    --help              Show this help message

EXAMPLES:
    $0 --user-config            # Set up user configuration
    sudo $0 --system-config     # Set up system-wide configuration
    $0 --i3-config              # Regenerate i3 configuration
    $0 --validate               # Check configuration validity

CONFIGURATION FILES:
    ~/.config/tilingwm/config.yaml          # Main configuration
    ~/.config/tilingwm/workspaces.conf      # Workspace rules
    ~/.config/tilingwm/keybindings.conf     # Custom keybindings
    ~/.config/tilingwm/autostart.conf       # Startup applications
    ~/.config/i3/config                     # i3 window manager config
    ~/.config/i3status/config               # i3status bar config

EOF
}

# Main function
main() {
    if [[ $# -eq 0 ]]; then
        show_usage
        exit 1
    fi
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --user-config)
                check_i3_available
                generate_user_config
                generate_i3_config
                generate_i3status_config
                validate_config
                log_info "User configuration completed successfully"
                shift
                ;;
            --system-config)
                generate_system_config
                log_info "System configuration completed successfully"
                shift
                ;;
            --i3-config)
                check_i3_available
                generate_i3_config
                log_info "i3 configuration regenerated"
                shift
                ;;
            --i3status-config)
                generate_i3status_config
                log_info "i3status configuration regenerated"
                shift
                ;;
            --reset)
                reset_config
                shift
                ;;
            --validate)
                if validate_config; then
                    echo "Configuration is valid"
                    exit 0
                else
                    echo "Configuration has errors"
                    exit 1
                fi
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

# Run main function
main "$@"